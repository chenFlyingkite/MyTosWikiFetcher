import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;


// 2022/07/27 22:21 start
class Result {

    /*
     * Complete the 'countGroups' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts STRING_ARRAY related as parameter.
     */

    public static int countGroups(List<String> related) {
    // Write your code here
        return sol1(related);
        //return sol2(related);
    }
    
    // 22:39 start to sol2
    // 22:45 finish draft
    public static int sol2(List<String> a) {
        int n = a.size();
        pn("a = %s", a);
        ln("n = %s", n);
        List<PriorityQueue<Integer>> gp = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            PriorityQueue<Integer> si = new PriorityQueue<>();
            si.offer(i);
            gp.add(si);
        }
        ln("gp = %s", gp);
        for (int i = 0; i < n; i++) {
            for (int j = i+1; j < n; j++) {
                char x = a.get(i).charAt(j);
                PriorityQueue<Integer> si = gp.get(i);
                PriorityQueue<Integer> sj = gp.get(j);
                if (x == '1' && sj.size() > 0)  {
                    int j0 = sj.poll();
                    int min = Math.min(i, j0);
                    if (min == i) {
                        si.offer(j0);
                        while (!sj.isEmpty()) {
                            int g = sj.poll();
                            si.offer(g);
                        }
                    } else {
                        sj.offer(i);
                        while (!si.isEmpty()) {
                            int g = si.poll();
                            sj.offer(g);
                        }
                    }
                }
            }
        }
        ln("gp = %s", gp);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            PriorityQueue<Integer> si = gp.get(i);
            if (si.size() > 0) {
                ans++;
            }
        }
        return ans;
    }
    
    // 22:24 start to coding union set
    public static int sol1(List<String> a) {
        int n = a.size();
        pn("a = %s", a);
        ln("n = %s", n);
        int[] gp = new int[n];
        for (int i = 0; i < n; i++) {
            gp[i] = i;
        }
        ln("gp = %s", as(gp));
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                char x = a.get(i).charAt(j);
                if (x == '1') {
                    ln("union a[%s] = %s, a[%s] = %s", i, gp[i], j, gp[j]);
                    int min = Math.min(gp[i], gp[j]);
                    gp[i] = min;
                    gp[j] = min;
                }
            }
        }
        ln("gp = %s", as(gp));
        Set<Integer> gps = new HashSet<>();
        for (int i = 0; i < n; i++) {
            gps.add(gp[i]);
        }
        return gps.size();
    }
    
    private static String as(int[] a) {
        return Arrays.toString(a);
    }

    private static boolean debug = 1 > 0;
    private static void ln(String f, Object... p) {
        if (!debug) return;
        System.out.println(String.format(f, p));
    }
    private static void pn(String f, Object... p) {
        System.out.println(String.format(f, p));
    }
}
public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int relatedCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<String> related = IntStream.range(0, relatedCount).mapToObj(i -> {
            try {
                return bufferedReader.readLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .collect(toList());

        int result = Result.countGroups(related);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
